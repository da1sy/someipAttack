from fuzzer.config import config
from fuzzer.fuzzer import Fuzzer
from fuzzer.heartbeat import Heartbeat
from fuzzer.log import log_info, log_error
from fuzzer.template import *
from fuzzer.types import *
from queue import Queue
import signal
import time
from pwn import *
import signal
from threading import Lock

def generate_template():
    generator = Template()
    packets = generator.read_capture()
    trace = generator.create_template(packets)
    generator.save_template(trace)
    log_info("Printing JSON dump")
    generator.print_template(trace)

def import_template():
    generator = Template()
    trace = generator.read_template()
    return trace

def shutdown(signum, frame):    
    raise ServiceShutdown("Caught signal %d" % signum)

def main(n,thread_num):
    signal.signal(signal.SIGTERM, shutdown)
    signal.signal(signal.SIGINT, shutdown)

    excq = Queue()
    targets = []
    threads = []

    template = import_template()
    fields = template[(True, config["Fuzzer"]["Layer"])]["fields"].items()

    for fieldname, fieldvalues in fields:
        fuzzer = fieldvalues["fuzzing"]["fuzzer"]
        if fuzzer is not None:
            targets.append((fieldname, fuzzer))
            log.info("Fuzzing protocol layer '{}' on protocol field '{}'".format(config["Fuzzer"]["Layer"], fieldname))

    if config["Fuzzer"]["Mode"] == "replay":
        try:
            threads.append(Heartbeat(excq))
            lock = Lock()
            for i in range(thread_num):
                threads.append(Fuzzer(0, excq, template, targets, lock, n,i))
            for t in threads:
                t.start()
            while True:
                if excq.qsize() != 0:
                    raise excq.get()
        except (NoHostError, NoHeartbeatError, NoSudoError) as exc:
            log_error(exc)
        except ServiceShutdown as msg:
            log.failure(msg)
        finally:
            for t in threads:
                t.shutdown.set()
                t.join()
            log.info("Exiting main()")
    elif config["Fuzzer"]["Mode"] == "live":
        pass
    return n


def test_send(value):
        log_info("Sending: {}".format(value))
        i = IP(src=config["Client"]["Host"], dst=config["Service"]["Host"])
        u = UDP(sport=config["Client"].getint("Port"), dport=config["Service"].getint("Port"))
        sip = SOMEIP()
        sip.iface_ver = 0
        sip.proto_ver = 1
        sip.msg_type = "REQUEST"
        sip.retcode = "E_OK"
        sip.srv_id = 0x1234
        sip.sub_id = 0x0
        sip.method_id=0x0421
        sip.client_id = 0x1313
        sip.session_id = 0x0013
        sip.add_payload(Raw (value))
        # print("-"*50)
        # print(sip)
        paket = i/u/sip
        res = sr1(paket, retry=0, timeout=1, verbose=False)

if __name__ == "__main__":
    global n
    n=0
    thread_num=10
    log.info("%s 线程测试"%(thread_num))
    while True:
        n = main(n,thread_num)
        n+=thread_num


        

